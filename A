local serverURL = "https://aca81e58-d6f7-45fa-b644-30bbaad780a5-00-3oqlxf9wb5ogo.picard.replit.dev"

local tool = Instance.new("Tool")
tool.Name = "Bloqueador"
tool.RequiresHandle = false
tool.Parent = game.Players.LocalPlayer.Backpack

local HttpService = game:GetService("HttpService")
local player = game.Players.LocalPlayer

-- Tabla para almacenar posiciones de bloques ya creados localmente (keys string "x_y_z")
local bloquesLocales = {}

local function posToKey(pos)
    return string.format("%d_%d_%d", math.floor(pos.X + 0.5), math.floor(pos.Y + 0.5), math.floor(pos.Z + 0.5))
end

local function hayBloqueEnPos(pos)
    local key = posToKey(pos)
    return bloquesLocales[key] ~= nil
end

local function colocarBloque(pos)
    local key = posToKey(pos)
    if bloquesLocales[key] then
        print("Bloque ya existe en:", key)
        return
    end

    print("Colocando bloque en:", key)
    local bloque = Instance.new("Part")
    bloque.Size = Vector3.new(4, 4, 4)
    bloque.Anchored = true
    bloque.CanCollide = true
    bloque.Position = pos
    bloque.Color = Color3.fromRGB(255, 255, 0)
    bloque.Parent = workspace

    bloquesLocales[key] = bloque
end

local function enviarBloque(pos)
    local body = HttpService:JSONEncode({
        x = pos.X,
        y = pos.Y,
        z = pos.Z,
        color = "amarillo"
    })

    local success, response = pcall(function()
        return syn.request({
            Url = serverURL.."/colocar",
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = body
        })
    end)

    if not success then
        warn("Error al enviar bloque:", response)
    else
        print("Bloque enviado:", posToKey(pos))
    end
end

tool.Activated:Connect(function()
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local posJugador = hrp.Position
    local posBloque = posJugador -- el servidor har√° el redondeo

    colocarBloque(posBloque)
    enviarBloque(posBloque)
end)

task.spawn(function()
    while true do
        local success, res = pcall(function()
            return syn.request({
                Url = serverURL.."/bloques",
                Method = "GET"
            })
        end)

        if success and res.StatusCode == 200 then
            print("Respuesta servidor:", res.Body)
            local ok, lista = pcall(function()
                return HttpService:JSONDecode(res.Body)
            end)

            if ok and type(lista) == "table" then
                for _, b in ipairs(lista) do
                    local pos = Vector3.new(b.x, b.y, b.z)
                    if not hayBloqueEnPos(pos) then
                        colocarBloque(pos)
                    else
                        print("Bloque ya existe localmente:", posToKey(pos))
                    end
                end
            else
                warn("Error al decodificar la lista de bloques")
            end
        else
            warn("Error al obtener bloques del servidor")
        end

        task.wait(3)
    end
end)
